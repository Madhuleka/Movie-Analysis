}
if(list_votes[i] > 750000 && list_votes[i]<= 1000000)
{
rating_count[j,6] <- rating_count[j,6] + 1
}
}
rating_count
image(rating_count)
plot(raster(rating_count))
plot)rasterImage(rating_count)
plot)rasterImage(rating_count))
plot(rasterImage(rating_count))
image(rating_count)
list_votes = c()
for(element in movie_data$Number_of_Votes)
{
list_votes = append(list_votes, element)
}
list_rating = c()
for(element in movie_data$Rating)
{
list_rating = append(list_rating, element)
}
rating_count=matrix(0,5,6)
rownames(rating_count)=c("8","8.5", "9", "9.5", "10")
colnames(rating_count)=c("<50k","<100k", "<250k", "<500k", "<750k", "<1m")
for(i in 1:1000)
{
j = case_when(
list_rating[i] <= 8 ~ 1,
list_rating[i]<=8.5 ~ 2,
list_rating[i]<=9 ~ 3,
list_rating[i]<=9.5 ~ 4,
list_rating[i]<=10 ~ 5
)
if(list_votes[i]<= 50000)
{
rating_count[j,1] <- rating_count[j,1] + 1
}
if(list_votes[i] > 50000 && list_votes[i]<= 100000)
{
rating_count[j,2] <- rating_count[j,2] + 1
}
if(list_votes[i] > 100000 && list_votes[i]<= 250000)
{
rating_count[j,3] <- rating_count[j,3] + 1
}
if(list_votes[i] > 250000 && list_votes[i]<= 500000)
{
rating_count[j,4] <- rating_count[j,4] + 1
}
if(list_votes[i] > 500000 && list_votes[i]<= 750000)
{
rating_count[j,5] <- rating_count[j,5] + 1
}
if(list_votes[i] > 750000 && list_votes[i]<= 1000000)
{
rating_count[j,6] <- rating_count[j,6] + 1
}
}
rating_count
list_votes
rating_count
list_rating
rating_count
list_votes
list_votes = c()
for(element in movie_data$Number_of_Votes)
{
list_votes = append(list_votes, element)
}
list_rating = c()
for(element in movie_data$Rating)
{
list_rating = append(list_rating, element)
}
rating_count=matrix(0,5,6)
rownames(rating_count)=c("8","8.5", "9", "9.5", "10")
colnames(rating_count)=c("<50k","<100k", "<250k", "<500k", "<750k", "<1m")
for(i in 1:1000)
{
j = case_when(
list_rating[i] <= 8 ~ 1,
list_rating[i]<=8.5 ~ 2,
list_rating[i]<=9 ~ 3,
list_rating[i]<=9.5 ~ 4,
list_rating[i]<=10 ~ 5
)
if(list_votes[i]<= 50000)
{
rating_count[j,1] <- rating_count[j,1] + 1
}
if(list_votes[i] > 50000 && list_votes[i]<= 100000)
{
rating_count[j,2] <- rating_count[j,2] + 1
}
if(list_votes[i] > 100000 && list_votes[i]<= 250000)
{
rating_count[j,3] <- rating_count[j,3] + 1
}
if(list_votes[i] > 250000 && list_votes[i]<= 500000)
{
rating_count[j,4] <- rating_count[j,4] + 1
}
if(list_votes[i] > 500000 && list_votes[i]<= 750000)
{
rating_count[j,5] <- rating_count[j,5] + 1
}
if(list_votes[i] > 750000)
{
rating_count[j,6] <- rating_count[j,6] + 1
}
}
rating_count
matplot(t, rating_count)
matplot(t(rating_count))
matplot(t(rating_count), type = "l")
heatmap(rating_count)
matplot(t(rating_count), type = "l")
matplot(t(rating_count), xlab = "Rating", ylab = "Number of Votes", main = "Rating vs Votes", type = "l")
ggplot(data=rating_count,aes(x=x,y=y,fill=z))+
geom_tile()
heatmap(rating_count)
plot(rating_count)
ggcorrplot(corr)
ggcorrplot(rating_count)
############
#This R program reads the csv file with data from IMDb website and makes
#multiple plots to help visualise the data.
#############
# Package names
packages <- c("ggplot2", "readr", "dplyr", "tidyverse", "rvest", "knitr", "xml2", "sjmisc", "ggcorrplot")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
lapply(packages, library, character.only = TRUE)
ggcorrplot(rating_count)
rating_count=matrix(0,5,6)
rownames(rating_count)=c("8","8.5", "9", "9.5", "10")
colnames(rating_count)=c("<50k","<100k", "<250k", "<500k", "<750k", ">750")
for(i in 1:1000)
{
j = case_when(
list_rating[i] <= 8 ~ 1,
list_rating[i]<=8.5 ~ 2,
list_rating[i]<=9 ~ 3,
list_rating[i]<=9.5 ~ 4,
list_rating[i]<=10 ~ 5
)
if(list_votes[i]<= 50000)
{
rating_count[j,1] <- rating_count[j,1] + 1
}
if(list_votes[i] > 50000 && list_votes[i]<= 100000)
{
rating_count[j,2] <- rating_count[j,2] + 1
}
if(list_votes[i] > 100000 && list_votes[i]<= 250000)
{
rating_count[j,3] <- rating_count[j,3] + 1
}
if(list_votes[i] > 250000 && list_votes[i]<= 500000)
{
rating_count[j,4] <- rating_count[j,4] + 1
}
if(list_votes[i] > 500000 && list_votes[i]<= 750000)
{
rating_count[j,5] <- rating_count[j,5] + 1
}
if(list_votes[i] > 750000)
{
rating_count[j,6] <- rating_count[j,6] + 1
}
}
rating_count
############
#This R program reads the csv file with data from IMDb website and makes
#multiple plots to help visualise the data.
#############
# Package names
packages <- c("ggplot2", "readr", "dplyr", "tidyverse", "rvest", "knitr", "xml2", "sjmisc", "ggcorrplot", "GGally")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
lapply(packages, library, character.only = TRUE)
ggpairs(rating_count)
df <- df.rating_count
ggpairs(data.frame(rating_count))
ggplot(rating_count)
df <- df.rating_count
matplot(t(rating_count), xlab = "Rating", ylab = "Number of Votes", main = "Rating vs Votes", type = "l")
rating_count
matplot(rating_count, xlab = "Rating", ylab = "Number of Votes", main = "Rating vs Votes", type = "l")
ggplot(rating_count)
ggcorrplot(rating_count)
matpoints(t(boxplot(rating_count, plot = FALSE)$stats), pch = 19, col = 'black')
matpoints(t(boxplot(rating_count, plot = FALSE)$stats), pch = 19, col = 'black')
matpoints(t(boxplot(rating_count, plot = FALSE)), pch = 19, col = 'black')
matplot(t(boxplot(rating_count, plot = FALSE)), pch = 19, col = 'black')
#######
#This R program scraps data from the IMDb website and saves it in a the form
#of a csv file.
########
# Package names
packages_needed <- c("ggplot2", "readr", "dplyr", "tidyverse", "rvest", "knitr", "xml2")
# Install packages not yet installed
packages_already_installed <- packagesneeded %in% rownames(installed.packages())
if (any(packages_already_installed == FALSE)) {
install.packages(packages[!packages_already_installed])
}
# Packages loading
lapply(packages_needed, library, character.only = TRUE)
Movie_Dataframe = data.frame()
for(i in seq(from = 1, to = 1000, by = 250))
{
url <- paste0("https://www.imdb.com/search/title/?groups=top_1000&sort=user_rating,desc&count=250&start=", i, "&ref_=adv_nxt")
doc <- read_html(url)
Movie_Dataframe = rbind(Movie_Dataframe, data.frame(Name=doc %>% html_nodes(".lister-item-content h3 a") %>% html_text(),
Year=parse_number(doc %>% html_nodes(".lister-item-year") %>% html_text()),
Rating=doc %>% html_nodes(".ratings-imdb-rating strong") %>% html_text(),
Runtime=parse_number(doc %>% html_nodes(".runtime") %>% html_text()),
Genre=gsub("[\n]", "", doc %>% html_nodes(".genre") %>% html_text()),
Number_of_Votes = parse_number(doc %>% html_nodes(".sort-num_votes-visible") %>% html_text())))
}
movie_csv <- write.csv(Movie_Dataframe, "./movie_data.csv", row.names = FALSE)
############
#This R program reads the csv file with data from IMDb website and makes
#multiple plots to help visualise the data.
#############
# Package names
packages <- c("ggplot2", "readr", "dplyr", "tidyverse", "rvest", "knitr", "xml2", "sjmisc", "ggcorrplot")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
lapply(packages, library, character.only = TRUE)
movie_data <- read.csv("movie_data.csv")
list_1 = c(0,0,0,0,0,0,0)
names(list_1) <- c("Genre_1","Genre_2","Genre_3","Genre_4","Genre_5","Genre_6", "Genre_7")
for(element in movie_data$Genre)
{
y = unlist(strsplit(element,","))
if(str_contains(y, c("Action","War","Adventure"),ignore.case = TRUE,logic = "or"))
list_1["Genre_1"]=list_1["Genre_1"] + 1
if(str_contains(y, c("Drama","Family"),ignore.case = TRUE,logic = "or"))
list_1["Genre_2"] = list_1["Genre_2"] + 1
if(str_contains(y, c("Fantasy","Sci-Fi"),ignore.case = TRUE,logic = "or"))
list_1["Genre_3"] = list_1["Genre_3"] + 1
if(str_contains(y, c("Crime","Mystery","Thriller"),ignore.case = TRUE,logic = "or"))
list_1["Genre_4"] = list_1["Genre_4"] + 1
if(str_contains(y, "Biography",ignore.case = TRUE,logic = "or"))
list_1["Genre_5"] = list_1["Genre_5"] + 1
if(str_contains(y, c("Comedy","Romance"),ignore.case = TRUE,logic = "or"))
list_1["Genre_6"] = list_1["Genre_6"] + 1
if(str_contains(y, "Horror",ignore.case = TRUE,logic = "or"))
list_1["Genre_7"] = list_1["Genre_7"] + 1
}
genre_names<-c("Adventure,War,Action","Drama,Family","Fantasy,Sci-fi","Crime,Mystery,Thriller","Biography","Comedy,Romance","Horror")
genre_count<-c(list_1["Genre_1"],list_1["Genre_2"],list_1["Genre_3"],list_1["Genre_4"],list_1["Genre_5"],list_1["Genre_6"],list_1["Genre_7"])
barplot(genre_count,names.arg=genre_names,xlab="Genre",ylab="Count",col="blue",
main="Genre chart")
pie(genre_count, genre_names, radius = 1, main = "Genre Chart")
list_2 = c(0,0,0,0)
names(list_2) <- c("Lessthan_8.5","Lessthan_9","Lessthan_9.5","Lessthan_10")
for(element in movie_data$Rating)
{
if(element < 8.5)
list_2["Lessthan_8.5"] = list_2["Lessthan_8.5"] + 1
if(element >= 8.5 & element < 9)
list_2["Lessthan_9"] = list_2["Lessthan_9"] + 1
if(element >= 9 & element < 9.5)
list_2["Lessthan_9.5"] = list_2["Lessthan_9.5"] + 1
if(element >= 9.5)
list_2["Lessthan_10"] = list_2["Lessthan_10"] + 1
}
Rating_list <- c(list_2["Lessthan_8.5"], list_2["Lessthan_9"], list_2["Lessthan_9.5"], list_2["Lessthan_10"])
Rating_name <- c("Less than 8.5", "Between 8.5 and 9", "Between 9 and 9.5", "Greater than 9,5")
barplot(Rating_list,names.arg=Rating_name,xlab="Rating",ylab="Frequency",col="blue",
main="Rating chart")
list_3 = c(0,0,0,0,0,0,0)
names(list_3) <- c("60s_and_before", "70s", "80s","90s","00s","10s","20s")
for(element in movie_data$Year)
{
if(element < 1970)
list_3["60s_and_before"] = list_3["60s_and_before"] + 1
if(element >= 1970 && element < 1980)
list_3["70s"] = list_3["70s"] + 1
if(element >= 1980 && element < 1990)
list_3["80s"] = list_3["80s"] + 1
if(element >= 1990 && element < 2000)
list_3["90s"] = list_3["90s"] + 1
if(element >= 2000 && element < 2010)
list_3["00s"] = list_3["00s"] + 1
if(element >= 2010 && element < 2020)
list_3["10s"] = list_3["10s"] + 1
if(element >= 2020 && element < 2030)
list_3["20s"] = list_3["20s"] + 1
}
Year_list <- c("<70s", "70s", "80s", "90s", "00s", "10s", "20s")
Year_count <- c(list_3["60s_and_before"], list_3["70s"], list_3["80s"], list_3["90s"], list_3["00s"], list_3["10s"], list_3["20s"])
barplot(Year_count, names.arg = Year_list, xlab = "Year", ylab = "Frequency", col = "blue", main = "Year chart")
list_4 = c(0,0,0,0,0,0)
names(list_4) = c("<50k", "<100k", "<250k", "<500k", "<750k", "<1m")
for(element in movie_data$Number_of_Votes)
{
if(element < 50000)
list_4["<50k"] = list_4["<50k"] + 1
if(element >= 50000 && element < 100000)
list_4["<100k"] = list_4["<100k"] + 1
if(element >= 100000 && element < 250000)
list_4["<250k"] = list_4["<250k"] + 1
if(element >= 250000 && element < 500000)
list_4["<500k"] = list_4["<500k"] + 1
if(element >= 500000 && element < 750000)
list_4["<750k"] = list_4["<750k"] + 1
if(element >= 750000 && element < 1000000)
list_4["<1m"] = list_4["<1m"] + 1
}
Vote_list <- c("<50k", "<100k", "<250k", "<500k", "<750k", "<1m")
Vote_Count <- c(list_4["<50k"], list_4["<100k"], list_4["<250k"], list_4["<500k"], list_4["<750k"], list_4["<1m"])
barplot(Vote_Count, name.arg = Vote_list, xlab = "Vote Count", ylab = "Frequency", col = "blue", main = "Votes Chart")
list_votes = c()
for(element in movie_data$Number_of_Votes)
{
list_votes = append(list_votes, element)
}
list_rating = c()
for(element in movie_data$Rating)
{
list_rating = append(list_rating, element)
}
rating_count=matrix(0,5,6)
rownames(rating_count)=c("8","8.5", "9", "9.5", "10")
colnames(rating_count)=c("<50k","<100k", "<250k", "<500k", "<750k", ">750")
for(i in 1:1000)
{
j = case_when(
list_rating[i] <= 8 ~ 1,
list_rating[i]<=8.5 ~ 2,
list_rating[i]<=9 ~ 3,
list_rating[i]<=9.5 ~ 4,
list_rating[i]<=10 ~ 5
)
if(list_votes[i]<= 50000)
{
rating_count[j,1] <- rating_count[j,1] + 1
}
if(list_votes[i] > 50000 && list_votes[i]<= 100000)
{
rating_count[j,2] <- rating_count[j,2] + 1
}
if(list_votes[i] > 100000 && list_votes[i]<= 250000)
{
rating_count[j,3] <- rating_count[j,3] + 1
}
if(list_votes[i] > 250000 && list_votes[i]<= 500000)
{
rating_count[j,4] <- rating_count[j,4] + 1
}
if(list_votes[i] > 500000 && list_votes[i]<= 750000)
{
rating_count[j,5] <- rating_count[j,5] + 1
}
if(list_votes[i] > 750000)
{
rating_count[j,6] <- rating_count[j,6] + 1
}
}
heatmap(rating_count)
heatmap(t(rating_count))
heatmap(t(rating_count))
rating_count
list_votes = c()
for(element in movie_data$Number_of_Votes)
{
list_votes = append(list_votes, element)
}
list_rating = c()
for(element in movie_data$Rating)
{
list_rating = append(list_rating, element)
}
#######
#This R program scraps data from the IMDb website and saves it in a the form
#of a csv file.
########
# Package names
packages_needed <- c("ggplot2", "readr", "dplyr", "tidyverse", "rvest", "knitr", "xml2")
# Install packages not yet installed
packages_already_installed <- packagesneeded %in% rownames(installed.packages())
if (any(packages_already_installed == FALSE)) {
install.packages(packages[!packages_already_installed])
}
# Packages loading
lapply(packages_needed, library, character.only = TRUE)
Movie_Dataframe = data.frame()
for(i in seq(from = 1, to = 1000, by = 250))
{
url <- paste0("https://www.imdb.com/search/title/?groups=top_1000&sort=user_rating,desc&count=250&start=", i, "&ref_=adv_nxt")
doc <- read_html(url)
Movie_Dataframe = rbind(Movie_Dataframe, data.frame(Name=doc %>% html_nodes(".lister-item-content h3 a") %>% html_text(),
Year=parse_number(doc %>% html_nodes(".lister-item-year") %>% html_text()),
Rating=doc %>% html_nodes(".ratings-imdb-rating strong") %>% html_text(),
Runtime=parse_number(doc %>% html_nodes(".runtime") %>% html_text()),
Genre=gsub("[\n]", "", doc %>% html_nodes(".genre") %>% html_text()),
Number_of_Votes = parse_number(doc %>% html_nodes(".sort-num_votes-visible") %>% html_text())))
}
movie_csv <- write.csv(Movie_Dataframe, "./movie_data.csv", row.names = FALSE)
movie_data <- read.csv("movie_data.csv")
list_4 = c(0,0,0,0,0,0)
names(list_4) = c("<50k", "<100k", "<250k", "<500k", "<750k", "<1m")
for(element in movie_data$Number_of_Votes)
{
if(element < 50000)
list_4["<50k"] = list_4["<50k"] + 1
if(element >= 50000 && element < 100000)
list_4["<100k"] = list_4["<100k"] + 1
if(element >= 100000 && element < 250000)
list_4["<250k"] = list_4["<250k"] + 1
if(element >= 250000 && element < 500000)
list_4["<500k"] = list_4["<500k"] + 1
if(element >= 500000 && element < 750000)
list_4["<750k"] = list_4["<750k"] + 1
if(element >= 750000 && element < 1000000)
list_4["<1m"] = list_4["<1m"] + 1
}
Vote_list <- c("<50k", "<100k", "<250k", "<500k", "<750k", "<1m")
Vote_Count <- c(list_4["<50k"], list_4["<100k"], list_4["<250k"], list_4["<500k"], list_4["<750k"], list_4["<1m"])
barplot(Vote_Count, name.arg = Vote_list, xlab = "Vote Count", ylab = "Frequency", col = "blue", main = "Votes Chart")
list_votes = c()
for(element in movie_data$Number_of_Votes)
{
list_votes = append(list_votes, element)
}
list_rating = c()
for(element in movie_data$Rating)
{
list_rating = append(list_rating, element)
}
rating_count=matrix(0,5,6)
rownames(rating_count)=c("8","8.5", "9", "9.5", "10")
colnames(rating_count)=c("<50k","<100k", "<250k", "<500k", "<750k", ">750")
for(i in 1:1000)
{
j = case_when(
list_rating[i] <= 8 ~ 1,
list_rating[i]<=8.5 ~ 2,
list_rating[i]<=9 ~ 3,
list_rating[i]<=9.5 ~ 4,
list_rating[i]<=10 ~ 5
)
if(list_votes[i]<= 50000)
{
rating_count[j,1] <- rating_count[j,1] + 1
}
if(list_votes[i] > 50000 && list_votes[i]<= 100000)
{
rating_count[j,2] <- rating_count[j,2] + 1
}
if(list_votes[i] > 100000 && list_votes[i]<= 250000)
{
rating_count[j,3] <- rating_count[j,3] + 1
}
if(list_votes[i] > 250000 && list_votes[i]<= 500000)
{
rating_count[j,4] <- rating_count[j,4] + 1
}
if(list_votes[i] > 500000 && list_votes[i]<= 750000)
{
rating_count[j,5] <- rating_count[j,5] + 1
}
if(list_votes[i] > 750000)
{
rating_count[j,6] <- rating_count[j,6] + 1
}
}
rating_count
heatmap(t(rating_count))
str(list_rating)
str(list_votes)
plot(list_votes, list_rating)
plot(list_rating ~ list_votes)
abline(list_rating ~ list_votes)
model = lm(list_rating ~ list_votes)
abline(model)
plot(list_votes, list_rating)
model = lm(list_rating ~ list_votes)
abline(model)
plot(movie.csv$Runtime, list_rating)
model = lm(list_rating ~ movie.csv$Runtime)
abline(model)
plot(movie_data$Runtime, list_rating)
model = lm(list_rating ~ movie_data$Runtime)
abline(model)
plot(movie_data$Runtime, list_votes)
>
plot(movie_data$Runtime, list_votes)
model = lm(list_votes ~ movie_data$Runtime)
abline(model)
plot(movie_data$Runtime, losg(list_votes))
plot(movie_data$Runtime, log(list_votes))
plot(movie_data$Runtime, log(list_votes))
model = lm(log(list_votes) ~ movie_data$Runtime)
abline(model)
